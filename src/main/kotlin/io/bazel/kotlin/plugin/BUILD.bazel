# Copyright 2020 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
load("//src/main/starlark/core/repositories/kotlin:releases.bzl", "KOTLINC_INDEX")
load("@rules_java//java:defs.bzl", "java_binary")
load("//src/main/kotlin:bootstrap.bzl", "kt_bootstrap_library")
load("//kotlin/internal/utils:generate_jvm_service.bzl", "generate_jvm_service")
load("@com_github_jetbrains_kotlin//:version.bzl", KOTLINC_MAJOR_VERSION = "MAJOR_VERSION")

# Generate a set of plugins for each major revision of the kotlinc compiler plugin api
[
    (
        # jdeps generator plugin
        kt_bootstrap_library(
            name = "jdeps-gen-lib-%s" % version,
            srcs = glob(["%s/jdeps/*.kt" % release.repository_name]),
            kotlinc_repository_name = release.repository_name,
            visibility = ["//src:__subpackages__"],
            deps = [
                "//src/main/kotlin/io/bazel/kotlin/builder/utils/jars",
                "//src/main/protobuf:deps_java_proto",
                "@%s//:kotlin-compiler" % release.repository_name,
                "@kotlin_rules_maven//:com_google_protobuf_protobuf_java",
            ],
        ),

        # services to integrate with the plugin.
        generate_jvm_service(
            name = "jdeps-gen-services-%s" % version,
            services = {
                "io.bazel.kotlin.plugin.%s.jdeps.JdepsGenComponentRegistrar" % release.repository_name: "org.jetbrains.kotlin.compiler.plugin.CompilerPluginRegistrar",
                "io.bazel.kotlin.plugin.%s.jdeps.JdepsGenCommandLineProcessor" % release.repository_name: "org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor",
            },
        ),
        # The plugin binary.
        java_binary(
            name = "jdeps-gen-%s" % version,
            visibility = ["//src:__subpackages__"],
            runtime_deps = [
                ":jdeps-gen-lib-%s" % version,
                ":jdeps-gen-services-%s" % version,
            ],
        ),
        # SkipCodeGen utility plugin
        kt_bootstrap_library(
            name = "skip-code-gen-lib-%s" % version,
            srcs = glob(["%s/*.kt" % release.repository_name]),
            kotlinc_repository_name = release.repository_name,
            visibility = ["//src:__subpackages__"],
            deps = [
                "@%s//:kotlin-compiler" % release.repository_name,
            ],
        ),
        # services to integrate with the plugin.
        generate_jvm_service(
            name = "skip-code-gen-services-%s" % version,
            services = {
                "io.bazel.kotlin.plugin.%s.SkipCodeGen" % release.repository_name: "org.jetbrains.kotlin.compiler.plugin.ComponentRegistrar",
            },
        ),
        # The plugin binary.
        java_binary(
            name = "skip-code-gen-%s" % version,
            visibility = ["//src:__subpackages__"],
            runtime_deps = [
                ":skip-code-gen-lib-%s" % version,
                ":skip-code-gen-services-%s" % version,
            ],
        ),
    )
    for version, release in KOTLINC_INDEX.items()
]

# Deploy jars are not aliased, so repack in a java_binary.
java_binary(
    name = "skip-code-gen",
    visibility = ["//src:__subpackages__"],
    runtime_deps = [
        ":jdeps-gen-lib-%s" % KOTLINC_MAJOR_VERSION,
        ":jdeps-gen-services-%s" % KOTLINC_MAJOR_VERSION,
    ],
)

alias(
    name = "skip-code-gen-lib",
    actual = "skip-code-gen-lib-%s" % KOTLINC_MAJOR_VERSION,
    visibility = ["//src:__subpackages__"],
)

# Deploy jars are not aliased, so repack in a java_binary.
java_binary(
    name = "jdeps-gen",
    visibility = ["//src:__subpackages__"],
    runtime_deps = [
        ":jdeps-gen-lib-%s" % KOTLINC_MAJOR_VERSION,
        ":jdeps-gen-services-%s" % KOTLINC_MAJOR_VERSION,
    ],
)

alias(
    name = "jdeps-gen-lib",
    actual = "jdeps-gen-lib-%s" % KOTLINC_MAJOR_VERSION,
    visibility = ["//src:__subpackages__"],
)
