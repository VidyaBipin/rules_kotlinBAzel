# Copyright 2018 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
load("@io_bazel_rules_kotlin//kotlin:kotlin.bzl", _kt_jvm_test = "kt_jvm_test")

_SUITE_CLASS_HEADER = """
// This suite class is generated by the jupiter_junit4_test macro.
import org.junit.runner.RunWith;
import org.junit.platform.runner.JUnitPlatform;
import org.junit.platform.suite.api.UseTechnicalNames;
import org.junit.platform.suite.api.SelectPackages;
import org.junit.platform.suite.api.SelectClasses;
import org.junit.platform.suite.api.ExcludeTags;

"""

_KOTLIN_DIALECT = struct(
    ann_arr_lbrace = "",
    ann_arr_rbrace = "",
    cls_sep = "::",
    file_ext = "kt",
    header = _SUITE_CLASS_HEADER,
    test_deps = depset([
        "//tools/jupiter:jupiter_lib",
        "@com_github_jetbrains_kotlin//:kotlin-test",
        "@com_github_jetbrains_kotlin//:kotlin-test-junit5",
    ]),
    rule = _kt_jvm_test,
)

_JAVA_DIALECT = struct(
    ann_arr_lbrace = "{",
    ann_arr_rbrace = "}",
    cls_sep = ".",
    file_ext = "java",
    header = _SUITE_CLASS_HEADER,
    test_deps = depset(["//tools/jupiter:jupiter_lib"]),
    rule = native.java_test,
)

def _mk_default_annotations(dialect):
    return """@RunWith(JUnitPlatform{cls_sep}class)
@UseTechnicalNames""".format(cls_sep = dialect.cls_sep)

def _mk_list_ann(dialect, name, lst):
    """Generate an annotation token containing the strings in lst. returns the empty string if the list is empty"""
    ret = ""
    if len(lst) > 0:
        ret = "\n@%s(%s\n%s\n%s)" % (
            name,
            dialect.ann_arr_lbrace,
            ",\n".join(lst),
            dialect.ann_arr_rbrace,
        )
    return ret

def _mk_class(c, sep):
    if not (c.endswith("Test") or c.endswith("Tests")):
        fail("test class must end with Test or Tests")
    return ("%s%sclass" % (c, sep))

def _gen_suite_class(name, dialect, select_classes, select_packages, exclude_tags):
    if (len(select_classes) + len(select_packages)) == 0:
        fail("must have at least a singe entry in test_class, select_classes or select_packages")
    suite_class_name = name
    suite_class_file = "%s.%s" % (suite_class_name, dialect.file_ext)
    annotations = (
        _mk_default_annotations(dialect) +
        _mk_list_ann(dialect, "SelectClasses", ["    %s" % _mk_class(c, dialect.cls_sep) for c in select_classes]) +
        _mk_list_ann(dialect, "SelectPackages", ["    \"%s\"" % p for p in select_packages]) +
        _mk_list_ann(dialect, "ExcludeTags", ["    \"%s\"" % p for p in exclude_tags]) +
        "\n"
    )

    clz = """public class %s {}""" % suite_class_name
    suite_class_body = (
        dialect.header +
        annotations +
        clz
    )
    native.genrule(
        name = "%s_suite_gen" % name,
        outs = [suite_class_file],
        cmd = """
cat <<EOF >> $@
%s
EOF
""" % suite_class_body,
    )
    return (suite_class_name, suite_class_file)

# This macro is called jupiter_junit4_test so that `jupiter_test` is free to be used by a bazel jupiter platform
# launcher.
def jupiter_junit4_test(
        # These parameters are standard rule parameters and are forwarded to the underlying test rules. They are
        # enumerated for discovery by intellij.
        name,
        srcs = [],
        deps = [],
        runtime_deps = [],
        jvm_flags = [],
        visibility = ["//visibility:private"],
        resources = [],
        resources_strip_prefix = None,
        resource_jars = [],
        tags = [],
        data = [],
        test_class = None,
        # Kotlin specific parameters
        friends = [],
        # These parameters become annotations on the generated suite class.
        exclude_tags = [],
        select_classes = [],
        select_packages = [],
        **kwargs):
    """Generate a suite class that delegates to the junit4 runner from Bazel. Handles Kotlin, Java and mixed mode.

    This macro is appropriate for idiomatic bazel testing patterns or for traditional multi file test suites. By default
    the Jupiter engine is provided on the runtime classpath.

    Notes:
      * Mixed mode is ok for multi file tests. But it should be avoided for simple tests as the compilation phase is
        slower.
      * `@UseTechnicalNames` is set on the suite class by default as reports generated by the bazel junit runner and
      the bazel intellij smrunner won't be able to perform discovery correctly otherwise.
      * The test classes must end with "Test" or they will be ignored."""
    if test_class:
        select_classes = select_classes + [test_class]
    dialect = _JAVA_DIALECT
    dialect_args = kwargs

    # Look for a single kotlin file and switch to the kotlin dialect if found.
    for src in srcs:
        if src.endswith(".kt"):
            dialect = _KOTLIN_DIALECT
            dialect_args["friends"] = friends
            break
    suite_class, suite_class_file = _gen_suite_class(
        name,
        dialect,
        select_classes,
        select_packages,
        exclude_tags,
    )
    dialect.rule(
        name = name,
        jvm_flags = jvm_flags,
        data = data,
        test_class = suite_class,
        srcs = [suite_class_file] + srcs,
        tags = tags,
        resource_jars = resource_jars,
        deps = (dialect.test_deps + deps).to_list(),
        runtime_deps = runtime_deps,
        resources = resources,
        resource_strip_prefix = resources_strip_prefix,
        visibility = visibility,
        **dialect_args
    )
